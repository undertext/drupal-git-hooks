#!/usr/bin/php
<?php
/**
 * @file
 * PHP CodeSniffer pre-commit hook for Git.
 *
 * Author: Yaroslav Kharchenko.
 */

echo <<<EOD
************************************************************************
*                                                                      *
*   GIT PRE-COMMIT HOOK FOR DRUPAL                                     *
*                                                                      *
*   In order to commit your changes, it must pass the three filters:   *
*   I. Syntax checking using PHP Linter                                *
*   II. Coding standards checking using PHP Code Sniffer               *
*   III. Blacklisted functions checking/validation.                    *
*                                                                      *
************************************************************************\n\n"
EOD;

$checks = array(
  // PHP blacklisted functions.
  'var_dump(',
  'print_r(',
  'die(',
  // Built-in debugging function.
  'debug(',
  // Devel's debugging functions.
  'dpm(',
  'krumo(',
  'dpr(',
  'dsm(',
  'dd(',
  'ddebug_backtrace(',
  'dpq(',
  'dprint_r(',
  'drupal_debug(',
  'dsm(',
  'dvm(',
  'dvr(',
  'kpr(',
  'kprint_r(',
  'kdevel_print_object(',
  // Code conflicts resulting from Git merge.
  '<<<<<<<',
  '>>>>>>>',
  // Javascript debugging functions.
  'console.log(',
  'alert('
);

// Generate the list of files to be parsed.
// Include the modified/added files indicated in the output of the Git status command.
$filters_include = array('modified', 'added', 'new file');

// Generate the list of excluded files.
$filters_exclude = array('libraries');

$grep_string = implode('\|', $filters_include);
$egrep_string = implode('\|', $filters_exclude);

// @todo Get rid of grep pipeline.
exec("git status | grep -e \".*\\({$grep_string}\\)\" | egrep -v \".*\\({$egrep_string}\\)\"", $output);

$files = array();

echo "File(s) to be processed/validated:" . PHP_EOL;
foreach ($output as $line) {
  $file = trim(substr($line, 13));
  $files[] = $file;
  echo $file . PHP_EOL;
}

$sniffer_errors_count = 0;

foreach ($files as $file) {
  echo "Validating $file..." . PHP_EOL . PHP_EOL;
  echo "I. Running PHP Linter" . PHP_EOL;
  exec("php -l $file", $lint_output, $lint_status_code);
  if ($lint_status_code == 0) {
    echo "II. Running the PHP Code Sniffer..." . PHP_EOL;
    exec("phpcs --standard=Drupal $file", $sniffer_output, $sniffer_status_code);
    if (!$sniffer_status_code) {
      echo "No formatting errors detected" . PHP_EOL;
    }
    else {
      foreach ($sniffer_output as $line) {
        print $line . PHP_EOL;
      }
      $sniffer_errors_count++;
    }
  }
  else {
    foreach ($lint_output as $line) {
      print $line;
    }
    echo "You have syntax error in your code. Please fix and commit your changes again." . PHP_EOL;
    exit(1);
  }

  $check_errors = array();

  $ext = pathinfo($file, PATHINFO_EXTENSION);
  if (in_array($ext, array('install', 'test', 'inc', 'module', 'php'))) {
    $handle = fopen($file, 'r');
    while (($buffer = fgets($handle)) !== FALSE) {
      foreach ($checks as $check) {
        if (!isset($check_errors[$check])) {
          if (strpos($buffer, $check) !== FALSE) {
            $check_errors[$check] = "$check found in file $file" . PHP_EOL;
          }
        }
      }
    }
    fclose($handle);
  }

}

if ($sniffer_errors_count > 0) {
  echo "Your commits failed to pass the PHP code sniffer validation." . PHP_EOL;
  echo "Kindly fix the code sniffer notices." . PHP_EOL . PHP_EOL;
  exit(1);
}

echo "III. Running the checker/validator for blacklisted functions..." . PHP_EOL;
if (!empty($check_errors)) {
  echo "These errors were found in try-to-commit files:" . PHP_EOL;
  foreach ($check_errors as $check_error) {
    echo $check_error;
  }

  echo PHP_EOL . "Can't commit your changes, fix the generated errors first." . PHP_EOL;
  exit(1);
}
else {
  echo "No backlisted function(s) detected." . PHP_EOL . PHP_EOL;
}

echo "Congratulations! You have passed all the filters, your code has now been committed." . PHP_EOL;
